password for modelCA and bank32.com: dees

#
# Create a CA and generate a valid certificate for the server
#

# 1. Setting a Certification Authority (CA)
$ mkdir demoCA
$ cd demoCA
$ mkdir certs crl newcerts
# touch command: It is used to create a file without any content. 
# Create index.txt and serial empty files
$ touch index.txt serial
$ echo 1000 > serial
$ cd ..

#////////////////////////////////
Changing openssl.cnf to use 'supplied' or 'optional' instead of 'match':
    [ policy_match ]
    ...
    #organizationName       = match
    organizationName        = supplied
  
$ sudo gedit /usr/bin/openssl.cnf  
and edit file contents as above
#////////////////////////////////

# 2. DNS (Associate domain bank32.com to localhost)
sudo gedit /etc/hosts

# Add entry
127.0.0.1 bank32.com

# Update hosts file
#/etc/init.d/hostname.sh
#////////////////////////////////

# 3. Create public-private key pair for ModelCA, and then generate a 
# self-signed certificate for it (ModelCA is the root CA)
$ openssl req -x509 -newkey rsa:4096 -sha256 -days 3650 -keyout modelCA_key.pem -out modelCA_cert.pem

# Enter certificate fields:
# C=US, ST=New York, L=Syracuse, O=Model CA, CN=modelCA.com

#///////////////////////////////////
# Generate bank32.com certificate
#///////////////////////////////////

# Generate public-private key pair
$ openssl genrsa -aes128 -out bank32_key.pem 2048

# Generate certificate signing request
$ openssl req -new -key bank32_key.pem -out bank.csr -sha256

# Enter certificate fields:
# C=US, ST=New York, O=Model CA, OU=Bank, CN=bank32.com

# Display csr
$ openssl req -in bank.csr -text -noout

# Ask CA to sign
$ openssl ca -in bank.csr -out bank32_cert.pem -md sha256 -cert modelCA_cert.pem -keyfile modelCA_key.pem

# Verify the bank32_cert.pem certificate 
$ openssl verify -verbose -CAfile modelCA_cert.pem bank32_cert.pem

# Analyse server C code 
# Run the server (domain bank32.com) in localhost
.../TLS/build-TLS_Server-Desktop-Debug$ ./TLS_Server

# Use browser to connect to https://localhost:8085 OR https://127.0.0.1:8085/  (on Firefox)

######## CLEAR PROCESSES ON GIVEN PORTS ############
If you know what port the process is running you can type: lsof -i:<port>.

For instance, lsof -i:8080, to list the process (pid) running on port 8080.

Then kill the process with kill <pid>

Or close the bash window
####################################################


# Run client
.../TLS/build-TLS_Client_with_callback-Desktop-Debug$ ./TLS_Client_with_callback

# Running the client bank32.com and server bank32.com is OK
# Running the client www.facebook.com and server bank32.com is not OK
# Running the client www.facebook.com and webserver www.example.com is not OK

#//////////////////////////////////////////////////
# Experiment: Man-In-The-Middle Attack
# We simulate a DNS Cache poisoning attack. So, every time users
# want to visit www.facebook.com, they will go to www.example.org

# DNS change
sudo gedit /etc/hosts

# Add entry
93.184.216.34 www.facebook.com

# Update hosts file (Ubuntu only)
#/etc/init.d/hostname.sh

















